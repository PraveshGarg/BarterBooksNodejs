{
  "{\"sourceRoot\":\"C:\\\\Users\\\\PGarg\\\\Downloads\\\\Barter Books and Games\\\\nodejs api\\\\src\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\PGarg\\\\Downloads\\\\Barter Books and Games\\\\nodejs api\",\"filename\":\"C:\\\\Users\\\\PGarg\\\\Downloads\\\\Barter Books and Games\\\\nodejs api\\\\src\\\\index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\PGarg\\\\Downloads\\\\Barter Books and Games\\\\nodejs api\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api\\src\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api",
      "filename": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api\\src\\index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api\\src\\index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api\\src\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api\\src\\",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const {\n  request\n} = require('express');\n\nconst express = require('express');\n\nconst cors = require('cors');\n\nvar bodyParser = require('body-parser');\n\nconst airtable = require('airtable');\n\nconst base = new airtable({\n  apiKey: \"keyxAPEC4r0HPZG7B\"\n}).base(\"appBTUuiZnBrMczf1\");\n\nvar crypto = require('crypto');\n\nvar nodemailer = require('nodemailer'); //-----------------------------------------------------------------------------------\n\n\nconst app = express();\nconst port = 3000;\nvar transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'barterbooksandgames@gmail.com',\n    pass: 'FirstWebsite222'\n  }\n});\napp.use(cors({\n  origin: \"*\",\n  methods: \"GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS\",\n  optionsSuccessStatus: 200\n}));\napp.use(bodyParser.json()); // support json encoded bodies\n\napp.use(bodyParser.urlencoded({\n  extended: true\n})); // support encoded bodies\n//---------------------------------------------------------------------------------------------------\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n}); //----------------------------------------- Login/SignUp js code---------------------------------------------------\n\napp.post('/login', function (req, res) {\n  let email = req.body.email;\n  let password = req.body.password; //console.log(req.headers.cookie);\n\n  checkLoginCredentialsfromdatabase().then(function (result) {\n    if (result.length > 0) {\n      // create token\n      var salt = crypto.randomBytes(16).toString('hex');\n      var token = crypto.pbkdf2Sync(result[0].id, salt, 1000, 64, 'sha512').toString('hex'); //encrypting password             \n\n      var hashPassword = crypto.pbkdf2Sync(password, result[0].fields.Salt, 1000, 64, 'sha512').toString('hex');\n\n      if (hashPassword === result[0].fields.Password) {\n        res.send([result[0].id, \"BooksBarter.html?City=\" + encodeURIComponent(result[0].fields.City), token]); //store token in login table\n\n        base('UserLogins').update([{\n          \"id\": result[0].id,\n          \"fields\": {\n            \"Token\": token\n          }\n        }], function (err, records) {});\n      } else {\n        res.send(\"\");\n      }\n    } else {\n      res.send(\"\");\n    }\n  });\n\n  function checkLoginCredentialsfromdatabase() {\n    return base('UserLogins').select({\n      filterByFormula: '{EmailId} = \"' + email + '\"'\n    }).all();\n  }\n});\napp.post('/signup', function (req, res) {\n  let email = req.body.email;\n  let password = req.body.password;\n  let firstname = req.body.firstname;\n  let lastname = req.body.lastname;\n  let mobile = req.body.mobile;\n  let city = req.body.city;\n  let address = req.body.address; // encrypting password and email \n\n  var salt = crypto.randomBytes(16).toString('hex');\n  var hashPassword = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');\n  checkEmailExistsInDatabase().then(function (result) {\n    if (result.length <= 0) {\n      // create token  \n      var token = crypto.pbkdf2Sync(result[0].id, salt, 1000, 64, 'sha512').toString('hex');\n      base('UserLogins').create({\n        \"EmailId\": email,\n        \"Password\": hashPassword,\n        \"Salt\": salt,\n        \"FirstName\": firstname,\n        \"LastName\": lastname,\n        \"Mobile\": mobile,\n        \"City\": city,\n        \"Address\": address,\n        \"Token\": token\n      }, function (err, record) {\n        res.send([record.id, \"BooksBarter.html?City=\" + encodeURIComponent(city), token]);\n      });\n    } else {\n      res.send(\"\");\n    }\n  });\n\n  function checkEmailExistsInDatabase() {\n    return base('UserLogins').select({\n      filterByFormula: '{EmailId} = \"' + email + '\"'\n    }).all();\n  }\n});\napp.post('/ForgotPassword', function (req, res) {\n  let email = req.body.email;\n  checkEmailExistsInDatabase().then(function (result) {\n    if (result.length > 0) {\n      //generate otp\n      var digits = '0123456789';\n      let otp = '';\n\n      for (let i = 0; i < 4; i++) {\n        otp += digits[Math.floor(Math.random() * 10)];\n      }\n\n      base('UserLogins').update([{\n        \"id\": result[0].id,\n        \"fields\": {\n          \"OTP\": otp\n        }\n      }], function (err, records) {\n        res.send(\"success\");\n      });\n      var mailOptions = {\n        from: 'barterbooksandgames@gmail.com',\n        to: email,\n        subject: 'Barter Books And Games Otp',\n        html: '<p>Hello Customer, <br> The otp for your forgot pasword request is ' + otp + '.<br> Kindly do not respond back to this email.</p>'\n      };\n      transporter.sendMail(mailOptions, function (error, info) {});\n    } else {\n      res.send(\"\");\n    }\n  });\n\n  function checkEmailExistsInDatabase() {\n    return base('UserLogins').select({\n      filterByFormula: '{EmailId} = \"' + email + '\"'\n    }).all();\n  }\n});\napp.post('/SubmitOtp', function (req, res) {\n  let email = req.body.email;\n  let otp = req.body.otp;\n  checkEmailExistsInDatabase().then(function (result) {\n    if (result.length > 0) {\n      base('UserLogins').update([{\n        \"id\": result[0].id,\n        \"fields\": {\n          \"OTP\": \"true\"\n        }\n      }], function (err, records) {\n        res.send(\"success\");\n      });\n    } else {\n      res.send(\"\");\n    }\n  });\n\n  function checkEmailExistsInDatabase() {\n    return base('UserLogins').select({\n      filterByFormula: 'AND({EmailId} = \"' + email + '\", {OTP} = \"' + otp + '\")'\n    }).all();\n  }\n});\napp.post('/ResetPassword', function (req, res) {\n  let email = req.body.email;\n  let password = req.body.password; // encrypting password and email \n\n  var salt = crypto.randomBytes(16).toString('hex');\n  var hashPassword = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');\n  checkEmailExistsInDatabase().then(function (result) {\n    if (result.length > 0) {\n      //create token\n      var token = crypto.pbkdf2Sync(result[0].id, salt, 1000, 64, 'sha512').toString('hex');\n      res.send([result[0].id, \"BooksBarter.html?City=\" + encodeURIComponent(result[0].fields.City), token]);\n      base('UserLogins').update([{\n        \"id\": result[0].id,\n        \"fields\": {\n          \"EmailId\": email,\n          \"Password\": hashPassword,\n          \"Salt\": salt,\n          \"Token\": token,\n          \"OTP\": \"\"\n        }\n      }], function (err, records) {});\n    } else {\n      res.send(\"\");\n    }\n  });\n\n  function checkEmailExistsInDatabase() {\n    return base('UserLogins').select({\n      filterByFormula: 'AND({EmailId} = \"' + email + '\", {OTP} = \"true\")'\n    }).all();\n  }\n}); //--------------------------------------------- BookBarter js code ----------------------------------------------------------\n\napp.post('/PostBooksAdData', function (req, res) {\n  let UserId = req.body.UserId;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('PostBooksAd').create({\n        \"UserId\": req.body.UserId,\n        \"BookName\": req.body.BookName,\n        \"BookType\": req.body.BookType,\n        \"TextLanguage\": req.body.TextLanguage,\n        \"Author\": req.body.Author,\n        \"BookLink\": req.body.BookLink,\n        \"Description\": req.body.Description,\n        \"BookInterestedIn\": req.body.BookInterestedIn\n      }, function (err, record) {});\n      res.send([\"Posted ad successfully.\", \"#93c90e\"]);\n    } else {\n      res.send([\"Session expired. Kindly re-login to continue.\", \"IndianRed\"]);\n    }\n  });\n});\napp.post('/CityBooksData', function (req, res) {\n  let city = req.body.City;\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  let UserLoginsData;\n  let ContactStatusData;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      getCityData().then(function (result) {\n        UserLoginsData = result;\n        return base('ContactStatus').select({\n          filterByFormula: 'OR({ContactFrom} = \"' + UserId + '\", {ContactTo} = \"' + UserId + '\")'\n        }).all();\n      }).then(function (result) {\n        ContactStatusData = result;\n        return base('PostBooksAd').select({\n          filterByFormula: '{UserId} != \"' + UserId + '\"'\n        }).all();\n      }).then(function (result) {\n        var dataArray = [];\n\n        for (var i = 0; i < result.length; i++) {\n          for (var j = 0; j < UserLoginsData.length; j++) {\n            if (UserLoginsData[j].id == result[i].fields.UserId) {\n              var status = \"\";\n              var tempContactStatusId = \"\"; //checking contact status\n\n              for (var k = 0; k < ContactStatusData.length; k++) {\n                if (ContactStatusData[k].fields.ContactTo == UserLoginsData[j].id) {\n                  status = ContactStatusData[k].fields.Status;\n                } else if (ContactStatusData[k].fields.ContactFrom == UserLoginsData[j].id && ContactStatusData[k].fields.Status == \"Waiting\") {\n                  status = \"Approve\";\n                  tempContactStatusId = ContactStatusData[k].id;\n                } else if (ContactStatusData[k].fields.ContactFrom == UserLoginsData[j].id) {\n                  status = ContactStatusData[k].fields.Status;\n                }\n              }\n\n              if (status == \"\") {\n                dataArray.push([\"\", result[i].fields.BookName, result[i].fields.BookType, result[i].fields.TextLanguage, result[i].fields.Author, result[i].fields.BookLink, result[i].fields.Description, result[i].fields.BookInterestedIn, UserLoginsData[j].fields.Address, UserLoginsData[j].fields.FirstName + \" \" + UserLoginsData[j].fields.LastName, \"Contact Button\", UserLoginsData[j].id, \"\"]);\n              } else if (status == \"Waiting\") {\n                dataArray.push([\"\", result[i].fields.BookName, result[i].fields.BookType, result[i].fields.TextLanguage, result[i].fields.Author, result[i].fields.BookLink, result[i].fields.Description, result[i].fields.BookInterestedIn, UserLoginsData[j].fields.Address, UserLoginsData[j].fields.FirstName + \" \" + UserLoginsData[j].fields.LastName, \"Waiting\", UserLoginsData[j].id, \"\"]);\n              } else if (status == \"Approved\") {\n                dataArray.push([\"\", result[i].fields.BookName, result[i].fields.BookType, result[i].fields.TextLanguage, result[i].fields.Author, result[i].fields.BookLink, result[i].fields.Description, result[i].fields.BookInterestedIn, UserLoginsData[j].fields.Address, UserLoginsData[j].fields.FirstName + \" \" + UserLoginsData[j].fields.LastName, UserLoginsData[j].fields.Mobile, UserLoginsData[j].id, \"\"]);\n              } else if (status == \"Approve\") {\n                dataArray.push([\"\", result[i].fields.BookName, result[i].fields.BookType, result[i].fields.TextLanguage, result[i].fields.Author, result[i].fields.BookLink, result[i].fields.Description, result[i].fields.BookInterestedIn, UserLoginsData[j].fields.Address, UserLoginsData[j].fields.FirstName + \" \" + UserLoginsData[j].fields.LastName, \"Approve\", UserLoginsData[j].id, tempContactStatusId]);\n              }\n            }\n          }\n        }\n\n        res.send(dataArray);\n      });\n\n      function getCityData() {\n        return base('UserLogins').select({\n          filterByFormula: '{City} = \"' + city + '\"'\n        }).all();\n      }\n    } else {\n      res.send(\"\");\n    }\n  });\n});\napp.post('/ContactButtonClicked', function (req, res) {\n  let UserId1 = req.body.UserId1;\n  let UserId2 = req.body.UserId2;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId1, function (err, record) {\n    if (record.fields.Token == token) {\n      CheckContactStatusData().then(function (result) {\n        if (result.length > 0) {\n          res.send([\"Refresh the page and then proceed\", \"IndianRed\"]);\n        } else {\n          base('ContactStatus').create({\n            \"ContactFrom\": UserId1,\n            \"ContactTo\": UserId2,\n            \"Status\": \"Waiting\"\n          }, function (err, record) {\n            res.send([\"Contacted successfully. Wait for the person's approval to show his/her mobile number\", \"#93c90e\"]);\n          });\n        }\n      });\n\n      function CheckContactStatusData() {\n        return base('ContactStatus').select({\n          filterByFormula: 'AND({ContactFrom} = \"' + UserId2 + '\", {ContactTo} = \"' + UserId1 + '\")'\n        }).all();\n      }\n    } else {\n      res.send([\"Session expired. Kindly re-login to continue.\", \"IndianRed\"]);\n    }\n  });\n});\napp.post('/ApproveRequest', function (req, res) {\n  let UserId1 = req.body.UserId1;\n  let UserId2 = req.body.UserId2;\n  let adId = req.body.adId;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId1, function (err, record) {\n    if (record.fields.Token == token) {\n      base('ContactStatus').update([{\n        \"id\": adId,\n        \"fields\": {\n          \"Status\": \"Approved\"\n        }\n      }], function (err, records) {\n        if (err) {\n          res.send([\"Refresh the page and then proceed\", \"IndianRed\"]);\n        } else {\n          res.send([\"Approved exchange number request successfully.\", \"#93c90e\"]);\n        }\n      });\n    } else {\n      res.send([\"Session expired. Kindly re-login to continue.\", \"IndianRed\"]);\n    }\n  });\n}); //***********************************  MyPosts js functions   ************************************************************\n\napp.post('/MyBookPostsData', function (req, res) {\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      getCityData().then(function (result) {\n        var dataArray = [];\n\n        for (var i = 0; i < result.length; i++) {\n          dataArray.push([result[i].id, result[i].fields.BookName, result[i].fields.BookType, result[i].fields.TextLanguage, result[i].fields.Author, result[i].fields.BookLink, result[i].fields.Description, result[i].fields.BookInterestedIn]);\n        }\n\n        res.send(dataArray);\n      });\n\n      function getCityData() {\n        return base('PostBooksAd').select({\n          filterByFormula: '{UserId} = \"' + UserId + '\"'\n        }).all();\n      }\n    } else {\n      res.send(\"\");\n    }\n  });\n});\napp.post('/GetEditMyPostData', function (req, res) {\n  let adId = req.body.adId;\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('PostBooksAd').find(adId, function (err, record) {\n        res.send([record.fields.BookName, record.fields.BookType, record.fields.TextLanguage, record.fields.Author, record.fields.BookLink, record.fields.Description, record.fields.BookInterestedIn]);\n      });\n    } else {\n      res.send(\"\");\n    }\n  });\n});\napp.post('/EditMyPostBooksAdData', function (req, res) {\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('PostBooksAd').update([{\n        \"id\": req.body.adId,\n        \"fields\": {\n          \"BookName\": req.body.BookName,\n          \"BookType\": req.body.BookType,\n          \"TextLanguage\": req.body.TextLanguage,\n          \"Author\": req.body.Author,\n          \"BookLink\": req.body.BookLink,\n          \"Description\": req.body.Description,\n          \"BookInterestedIn\": req.body.BookInterestedIn\n        }\n      }], function (err, records) {\n        if (err) {\n          res.send([\"Data edit failed\", \"IndianRed\"]);\n        } else {\n          res.send([\"Data edit successfully.\", \"#93c90e\"]);\n        }\n      });\n    } else {\n      res.send([\"Session expired. Kindly re-login to continue.\", \"IndianRed\"]);\n    }\n  });\n});\napp.post('/DeleteMyPostData', function (req, res) {\n  let AdId = req.body.AdId;\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('PostBooksAd').destroy([AdId], function (err, deletedRecords) {\n        if (err) {\n          res.send([\"Delete ad failed\", \"IndianRed\"]);\n        } else {\n          res.send([\"Data edited successfully.\", \"#93c90e\"]);\n        }\n      });\n    } else {\n      res.send([\"Session expired. Kindly re-login to continue.\", \"IndianRed\"]);\n    }\n  });\n}); //********************************* Requests page coed  ***********************************************/\n\napp.post('/RequestPostsData', function (req, res) {\n  let city = req.body.City;\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  let UserLoginsData;\n  let ContactStatusData;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      getCityData().then(function (result) {\n        UserLoginsData = result;\n        return base('ContactStatus').select({\n          filterByFormula: 'AND({ContactTo} == \"' + UserId + '\", {Status} = \"Waiting\")'\n        }).all();\n      }).then(function (result) {\n        ContactStatusData = result;\n        return base('PostBooksAd').select({\n          filterByFormula: '{UserId} != \"' + UserId + '\"'\n        }).all();\n      }).then(function (result) {\n        var dataArray = [];\n\n        for (var k = 0; k < ContactStatusData.length; k++) {\n          for (var i = 0; i < result.length; i++) {\n            if (ContactStatusData[k].fields.ContactFrom == result[i].fields.UserId) {\n              for (var j = 0; j < UserLoginsData.length; j++) {\n                if (UserLoginsData[j].id == result[i].fields.UserId) {\n                  dataArray.push([\"\", result[i].fields.BookName, result[i].fields.BookType, result[i].fields.TextLanguage, result[i].fields.Author, result[i].fields.BookLink, result[i].fields.Description, result[i].fields.BookInterestedIn, UserLoginsData[j].fields.Address, UserLoginsData[j].fields.FirstName + \" \" + UserLoginsData[j].fields.LastName, ContactStatusData[k].id, UserLoginsData[j].id]);\n                }\n              }\n            }\n          }\n        }\n\n        res.send(dataArray);\n      });\n\n      function getCityData() {\n        return base('UserLogins').select({\n          filterByFormula: '{City} = \"' + city + '\"'\n        }).all();\n      }\n    } else {\n      res.send(\"\");\n    }\n  });\n}); //********************************* Account page code *************************************************/\n\napp.post('/GetAccountDetails', function (req, res) {\n  let UserId = req.body.Userid;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('UserLogins').find(UserId, function (err, record) {\n        res.send([record.fields.FirstName, record.fields.LastName, record.fields.Mobile, record.fields.City, record.fields.Address, record.fields.EmailId]);\n      });\n    } else {\n      res.send(\"\");\n    }\n  });\n});\napp.post('/EditAccountDetails', function (req, res) {\n  let UserId = req.body.UserId;\n  let firstname = req.body.firstname;\n  let lastname = req.body.lastname;\n  let mobile = req.body.mobile;\n  let city = req.body.city;\n  let address = req.body.address;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('UserLogins').update([{\n        \"id\": UserId,\n        \"fields\": {\n          \"FirstName\": firstname,\n          \"LastName\": lastname,\n          \"Mobile\": mobile,\n          \"City\": city,\n          \"Address\": address\n        }\n      }], function (err, records) {\n        if (err) {\n          res.send([\"Account edit failed\", \"IndianRed\"]);\n        } else {\n          res.send([\"Account edited successfully.\", \"#93c90e\"]);\n        }\n      });\n    } else {\n      res.send([\"Session expired. Kindly re-login to continue.\", \"IndianRed\"]);\n    }\n  });\n});\napp.post('/ChangePassword', function (req, res) {\n  let UserId = req.body.UserId;\n  let OldPassword = req.body.OldPassword;\n  let NewPassword = req.body.NewPassword;\n  let token = req.body.Token;\n  base('UserLogins').find(UserId, function (err, record) {\n    if (record.fields.Token == token) {\n      base('UserLogins').find(UserId, function (err, record) {\n        var hashOldPassword = crypto.pbkdf2Sync(OldPassword, record.fields.Salt, 1000, 64, 'sha512').toString('hex');\n\n        if (hashOldPassword == record.fields.Password) {\n          var salt = crypto.randomBytes(16).toString('hex');\n          var hashNewPassword = crypto.pbkdf2Sync(NewPassword, salt, 1000, 64, 'sha512').toString('hex');\n          base('UserLogins').update([{\n            \"id\": UserId,\n            \"fields\": {\n              \"Password\": hashNewPassword,\n              \"Salt\": salt\n            }\n          }], function (err, records) {\n            if (err) {\n              res.send([\"Password change failed.\", \"IndianRed\"]);\n            } else {\n              res.send([\"Password changed successfully.\", \"#93c90e\"]);\n            }\n          });\n        } else {\n          res.send([\"Incorrect Password\"]);\n        }\n      });\n    } else {\n      res.send(\"\");\n    }\n  });\n});\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "request",
        "require",
        "express",
        "cors",
        "bodyParser",
        "airtable",
        "base",
        "apiKey",
        "crypto",
        "nodemailer",
        "app",
        "port",
        "transporter",
        "createTransport",
        "service",
        "auth",
        "user",
        "pass",
        "use",
        "origin",
        "methods",
        "optionsSuccessStatus",
        "json",
        "urlencoded",
        "extended",
        "get",
        "req",
        "res",
        "send",
        "post",
        "email",
        "body",
        "password",
        "checkLoginCredentialsfromdatabase",
        "then",
        "result",
        "length",
        "salt",
        "randomBytes",
        "toString",
        "token",
        "pbkdf2Sync",
        "id",
        "hashPassword",
        "fields",
        "Salt",
        "Password",
        "encodeURIComponent",
        "City",
        "update",
        "err",
        "records",
        "select",
        "filterByFormula",
        "all",
        "firstname",
        "lastname",
        "mobile",
        "city",
        "address",
        "checkEmailExistsInDatabase",
        "create",
        "record",
        "digits",
        "otp",
        "i",
        "Math",
        "floor",
        "random",
        "mailOptions",
        "from",
        "to",
        "subject",
        "html",
        "sendMail",
        "error",
        "info",
        "UserId",
        "Token",
        "find",
        "BookName",
        "BookType",
        "TextLanguage",
        "Author",
        "BookLink",
        "Description",
        "BookInterestedIn",
        "Userid",
        "UserLoginsData",
        "ContactStatusData",
        "getCityData",
        "dataArray",
        "j",
        "status",
        "tempContactStatusId",
        "k",
        "ContactTo",
        "Status",
        "ContactFrom",
        "push",
        "Address",
        "FirstName",
        "LastName",
        "Mobile",
        "UserId1",
        "UserId2",
        "CheckContactStatusData",
        "adId",
        "AdId",
        "destroy",
        "deletedRecords",
        "EmailId",
        "OldPassword",
        "NewPassword",
        "hashOldPassword",
        "hashNewPassword",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\PGarg\\Downloads\\Barter Books and Games\\nodejs api\\src\\",
      "sourcesContent": [
        "const { request } = require('express')\r\nconst express = require ('express')\r\nconst cors = require('cors')\r\nvar bodyParser = require('body-parser');\r\nconst airtable = require('airtable');\r\nconst base = new airtable({ apiKey: \"keyxAPEC4r0HPZG7B\" }).base(\"appBTUuiZnBrMczf1\");\r\nvar crypto = require('crypto');\r\nvar nodemailer = require('nodemailer');\r\n\r\n\r\n//-----------------------------------------------------------------------------------\r\n\r\nconst app = express()\r\nconst port = 3000\r\n\r\nvar transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: 'barterbooksandgames@gmail.com',\r\n    pass: 'FirstWebsite222'\r\n  }\r\n});\r\n\r\napp.use(\r\n    cors({\r\n  \r\n      origin: \"*\",\r\n  \r\n      methods: \"GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS\",\r\n  \r\n      optionsSuccessStatus: 200,\r\n  \r\n    })    \r\n  )\r\napp.use(bodyParser.json()); // support json encoded bodies\r\napp.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\r\n\r\n\r\n//---------------------------------------------------------------------------------------------------\r\n\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('Hello World!')\r\n})\r\n\r\n\r\n//----------------------------------------- Login/SignUp js code---------------------------------------------------\r\napp.post('/login', function(req, res){\r\n    let email =  req.body.email;\r\n    let password = req.body.password;\r\n    //console.log(req.headers.cookie);\r\n\r\n    checkLoginCredentialsfromdatabase().then(function (result) {\r\n        if (result.length > 0) {    \r\n          \r\n          // create token\r\n          var salt = crypto.randomBytes(16).toString('hex');\r\n          var token = crypto.pbkdf2Sync(result[0].id, salt, 1000, 64, 'sha512').toString('hex');              \r\n\r\n          //encrypting password             \r\n          var hashPassword = crypto.pbkdf2Sync(password, result[0].fields.Salt, 1000, 64, 'sha512').toString('hex');\r\n          if(hashPassword===result[0].fields.Password){ \r\n            res.send([result[0].id, \"BooksBarter.html?City=\"+encodeURIComponent(result[0].fields.City), token]);                                       \r\n            \r\n            //store token in login table\r\n            base('UserLogins').update([\r\n              {\r\n                \"id\": result[0].id,\r\n                \"fields\": {                  \r\n                  \"Token\": token,                \r\n                }\r\n              }            \r\n            ], function(err, records) {            \r\n            });\r\n          }\r\n          else{\r\n            res.send(\"\");          \r\n          }\r\n        }\r\n        else {\r\n          res.send(\"\");          \r\n        }                \r\n    })\r\n            \r\n    function checkLoginCredentialsfromdatabase() {\r\n        return  base('UserLogins').select({\r\n          filterByFormula: '{EmailId} = \"'+email+'\"',\r\n        }).all();        \r\n    }      \r\n});\r\n\r\n\r\napp.post('/signup', function(req, res){\r\n  let email =  req.body.email;\r\n  let password = req.body.password;\r\n  let firstname = req.body.firstname;\r\n  let lastname = req.body.lastname;\r\n  let mobile = req.body.mobile;\r\n  let city = req.body.city;\r\n  let address = req.body.address;\r\n  // encrypting password and email \r\n  var salt = crypto.randomBytes(16).toString('hex');            \r\n  var hashPassword = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');     \r\n  \r\n  \r\n\r\n  checkEmailExistsInDatabase().then(function (result) {    \r\n      if (result.length <= 0) {\r\n        // create token  \r\n        var token = crypto.pbkdf2Sync(result[0].id, salt, 1000, 64, 'sha512').toString('hex');\r\n\r\n        base('UserLogins').create({ \"EmailId\": email, \"Password\": hashPassword, \"Salt\": salt, \"FirstName\":firstname, \"LastName\":lastname, \"Mobile\":mobile, \"City\":city, \"Address\":address, \"Token\":token}, function (err, record) {\r\n          res.send([record.id,\"BooksBarter.html?City=\"+encodeURIComponent(city),token]);          \r\n          });                           \r\n      }\r\n      else {\r\n        res.send(\"\");        \r\n      }                \r\n  })\r\n          \r\n  function checkEmailExistsInDatabase() {\r\n      return  base('UserLogins').select({\r\n        filterByFormula: '{EmailId} = \"'+email+'\"',\r\n      }).all();        \r\n  }      \r\n});\r\n\r\n\r\napp.post('/ForgotPassword', function(req, res){\r\n  let email =  req.body.email;       \r\n  \r\n  checkEmailExistsInDatabase().then(function (result) {    \r\n      if (result.length > 0) {                \r\n\r\n          //generate otp\r\n          var digits = '0123456789';\r\n          let otp = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            otp += digits[Math.floor(Math.random() * 10)];\r\n          }                    \r\n        \r\n        \r\n        base('UserLogins').update([\r\n          {\r\n            \"id\": result[0].id,\r\n            \"fields\": {\r\n              \"OTP\": otp,                            \r\n            }\r\n          }            \r\n        ], function(err, records) {   \r\n          res.send(\"success\");         \r\n        });\r\n\r\n        var mailOptions = {\r\n          from: 'barterbooksandgames@gmail.com',\r\n          to: email,\r\n          subject: 'Barter Books And Games Otp',\r\n          html: '<p>Hello Customer, <br> The otp for your forgot pasword request is ' + otp + '.<br> Kindly do not respond back to this email.</p>'\r\n        }\r\n        \r\n        transporter.sendMail(mailOptions, function(error, info){          \r\n        });\r\n\r\n      }\r\n      else {\r\n        res.send(\"\");        \r\n      }                \r\n  })\r\n          \r\n  function checkEmailExistsInDatabase() {\r\n      return  base('UserLogins').select({\r\n        filterByFormula: '{EmailId} = \"'+email+'\"',\r\n      }).all();        \r\n  }      \r\n});\r\n\r\n\r\napp.post('/SubmitOtp', function(req, res){\r\n  let email =  req.body.email;       \r\n  let otp =  req.body.otp;       \r\n\r\n  checkEmailExistsInDatabase().then(function (result) {    \r\n      if (result.length > 0) {                                                    \r\n        \r\n        base('UserLogins').update([\r\n          {\r\n            \"id\": result[0].id,\r\n            \"fields\": {\r\n              \"OTP\": \"true\",                            \r\n            }\r\n          }            \r\n        ], function(err, records) {   \r\n          res.send(\"success\");         \r\n        });        \r\n\r\n      }\r\n      else {\r\n        res.send(\"\");        \r\n      }                \r\n  })\r\n          \r\n  function checkEmailExistsInDatabase() {\r\n      return  base('UserLogins').select({\r\n        filterByFormula: 'AND({EmailId} = \"'+email+'\", {OTP} = \"'+otp+'\")',\r\n      }).all();        \r\n  }      \r\n});\r\n\r\n\r\napp.post('/ResetPassword', function(req, res){\r\n  let email =  req.body.email;\r\n  let password = req.body.password;\r\n  // encrypting password and email \r\n  var salt = crypto.randomBytes(16).toString('hex');            \r\n  var hashPassword = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');   \r\n  \r\n  checkEmailExistsInDatabase().then(function (result) {    \r\n      if (result.length > 0) { \r\n        //create token\r\n        var token = crypto.pbkdf2Sync(result[0].id, salt, 1000, 64, 'sha512').toString('hex');\r\n\r\n        res.send([result[0].id,\"BooksBarter.html?City=\"+encodeURIComponent(result[0].fields.City), token]);                                 \r\n          \r\n          base('UserLogins').update([\r\n            {\r\n              \"id\": result[0].id,\r\n              \"fields\": {\r\n                \"EmailId\": email,\r\n                \"Password\": hashPassword,\r\n                \"Salt\": salt, \r\n                \"Token\": token,\r\n                \"OTP\":\"\",               \r\n              }\r\n            }            \r\n          ], function(err, records) {            \r\n          });\r\n      }\r\n      else {\r\n        res.send(\"\");        \r\n      }                \r\n  })\r\n          \r\n  function checkEmailExistsInDatabase() {\r\n      return  base('UserLogins').select({\r\n        filterByFormula: 'AND({EmailId} = \"'+email+'\", {OTP} = \"true\")',\r\n      }).all();        \r\n  }      \r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n//--------------------------------------------- BookBarter js code ----------------------------------------------------------\r\n\r\napp.post('/PostBooksAdData', function(req, res){    \r\n  let UserId = req.body.UserId;\r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {       \r\n    base('PostBooksAd').create({ \"UserId\": req.body.UserId, \"BookName\": req.body.BookName, \"BookType\": req.body.BookType, \"TextLanguage\": req.body.TextLanguage, \"Author\": req.body.Author, \"BookLink\": req.body.BookLink, \"Description\": req.body.Description, \"BookInterestedIn\": req.body.BookInterestedIn}, function (err, record) {      \r\n      });  \r\n      res.send([\"Posted ad successfully.\",\"#93c90e\"]);     \r\n    }\r\n    else{\r\n      res.send([\"Session expired. Kindly re-login to continue.\",\"IndianRed\"])\r\n    }\r\n  })                      \r\n});\r\n\r\n\r\napp.post('/CityBooksData', function(req, res){\r\n  let city = req.body.City;\r\n  let UserId =  req.body.Userid;\r\n  let token =  req.body.Token;      \r\n  \r\n  let UserLoginsData;\r\n  let ContactStatusData;\r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token){   \r\n\r\n    getCityData().then(function (result) {\r\n      UserLoginsData = result;\r\n      \r\n      return base('ContactStatus').select({\r\n        filterByFormula: 'OR({ContactFrom} = \"'+UserId+'\", {ContactTo} = \"'+UserId+'\")',    \r\n      }).all();\r\n\r\n    }).then(function (result) { \r\n      ContactStatusData = result;\r\n      \r\n      return base('PostBooksAd').select({  \r\n        filterByFormula: '{UserId} != \"'+UserId+'\"',    \r\n      }).all();\r\n\r\n    }).then(function (result){    \r\n      \r\n      var dataArray = [];\r\n      \r\n      for(var i=0; i<result.length; i++){\r\n        for(var j=0; j<UserLoginsData.length; j++){\r\n          if(UserLoginsData[j].id==result[i].fields.UserId){\r\n            var status=\"\";\r\n            var tempContactStatusId=\"\"\r\n            //checking contact status\r\n            for(var k=0; k<ContactStatusData.length; k++){\r\n              if(ContactStatusData[k].fields.ContactTo == UserLoginsData[j].id){\r\n                status = ContactStatusData[k].fields.Status;\r\n              }\r\n              else if(ContactStatusData[k].fields.ContactFrom == UserLoginsData[j].id && ContactStatusData[k].fields.Status == \"Waiting\"){\r\n                status = \"Approve\";\r\n                tempContactStatusId = ContactStatusData[k].id;\r\n              }\r\n              else if(ContactStatusData[k].fields.ContactFrom == UserLoginsData[j].id){\r\n                status = ContactStatusData[k].fields.Status;\r\n              }\r\n            }\r\n            if(status==\"\"){\r\n              dataArray.push([\"\",result[i].fields.BookName,result[i].fields.BookType,result[i].fields.TextLanguage,result[i].fields.Author,result[i].fields.BookLink,result[i].fields.Description,result[i].fields.BookInterestedIn,UserLoginsData[j].fields.Address,UserLoginsData[j].fields.FirstName+ \" \" + UserLoginsData[j].fields.LastName, \"Contact Button\", UserLoginsData[j].id, \"\"]);      \r\n            }\r\n            else if(status == \"Waiting\"){\r\n              dataArray.push([\"\",result[i].fields.BookName,result[i].fields.BookType,result[i].fields.TextLanguage,result[i].fields.Author,result[i].fields.BookLink,result[i].fields.Description,result[i].fields.BookInterestedIn,UserLoginsData[j].fields.Address,UserLoginsData[j].fields.FirstName+ \" \" + UserLoginsData[j].fields.LastName, \"Waiting\", UserLoginsData[j].id, \"\"]);      \r\n            }\r\n            else if(status == \"Approved\"){\r\n              dataArray.push([\"\",result[i].fields.BookName,result[i].fields.BookType,result[i].fields.TextLanguage,result[i].fields.Author,result[i].fields.BookLink,result[i].fields.Description,result[i].fields.BookInterestedIn,UserLoginsData[j].fields.Address,UserLoginsData[j].fields.FirstName+ \" \" + UserLoginsData[j].fields.LastName, UserLoginsData[j].fields.Mobile, UserLoginsData[j].id, \"\"]);      \r\n            }\r\n            else if(status == \"Approve\"){\r\n              dataArray.push([\"\",result[i].fields.BookName,result[i].fields.BookType,result[i].fields.TextLanguage,result[i].fields.Author,result[i].fields.BookLink,result[i].fields.Description,result[i].fields.BookInterestedIn,UserLoginsData[j].fields.Address,UserLoginsData[j].fields.FirstName+ \" \" + UserLoginsData[j].fields.LastName, \"Approve\", UserLoginsData[j].id, tempContactStatusId]);      \r\n            }\r\n\r\n          }\r\n        }       \r\n      }\r\n      res.send(dataArray);\r\n    })\r\n\r\n    \r\n    function getCityData(){     \r\n      return base('UserLogins').select({\r\n        filterByFormula: '{City} = \"'+city+'\"',\r\n      }).all();        \r\n    }   \r\n  }\r\n  else{\r\n    res.send(\"\");\r\n  }\r\n})\r\n});\r\n\r\n\r\napp.post('/ContactButtonClicked', function(req, res){  \r\n  let UserId1 =  req.body.UserId1;      \r\n  let UserId2 =  req.body.UserId2;\r\n  let token =  req.body.Token;      \r\n    \r\n  base('UserLogins').find(UserId1, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {   \r\n    CheckContactStatusData().then(function (result) {\r\n      if(result.length>0){\r\n        res.send([\"Refresh the page and then proceed\",\"IndianRed\"]);\r\n      }\r\n      else{\r\n        base('ContactStatus').create({ \"ContactFrom\": UserId1, \"ContactTo\": UserId2, \"Status\": \"Waiting\"}, function (err, record) {\r\n          res.send([\"Contacted successfully. Wait for the person's approval to show his/her mobile number\",\"#93c90e\"]);          \r\n          });\r\n      }\r\n    })    \r\n     \r\n    function CheckContactStatusData(){\r\n      return base('ContactStatus').select({\r\n        filterByFormula: 'AND({ContactFrom} = \"'+UserId2+'\", {ContactTo} = \"'+UserId1+'\")',    \r\n      }).all();\r\n    }\r\n\r\n  }\r\n  else{\r\n    res.send([\"Session expired. Kindly re-login to continue.\",\"IndianRed\"]);\r\n  }\r\n  })\r\n  \r\n});\r\n\r\n\r\napp.post('/ApproveRequest', function(req, res){  \r\n  let UserId1 =  req.body.UserId1;\r\n  let UserId2 =  req.body.UserId2;\r\n  let adId = req.body.adId;     \r\n  let token = req.body.Token;  \r\n\r\n  base('UserLogins').find(UserId1, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {                  \r\n      base('ContactStatus').update([\r\n        {\r\n          \"id\": adId,\r\n          \"fields\": {\r\n            \"Status\": \"Approved\"\r\n          }\r\n        }\r\n      ], function (err, records) {\r\n        if(err){\r\n          res.send([\"Refresh the page and then proceed\",\"IndianRed\"]);   \r\n        }\r\n        else{\r\n          res.send([\"Approved exchange number request successfully.\",\"#93c90e\"]);   \r\n        }\r\n      });  \r\n    }\r\n    else{\r\n      res.send([\"Session expired. Kindly re-login to continue.\",\"IndianRed\"]);\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//***********************************  MyPosts js functions   ************************************************************\r\n\r\napp.post('/MyBookPostsData', function(req, res){  \r\n  let UserId =  req.body.Userid;      \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {\r\n    getCityData().then(function (result) { \r\n      var dataArray = [];\r\n      for(var i=0; i<result.length; i++){\r\n        dataArray.push([result[i].id,result[i].fields.BookName,result[i].fields.BookType,result[i].fields.TextLanguage,result[i].fields.Author,result[i].fields.BookLink,result[i].fields.Description,result[i].fields.BookInterestedIn]);      \r\n      }       \r\n      res.send(dataArray);\r\n    })\r\n    \r\n    function getCityData(){\r\n      return base('PostBooksAd').select({\r\n        filterByFormula: '{UserId} = \"'+UserId+'\"',      \r\n      }).all();        \r\n    } \r\n  }\r\n  else{\r\n    res.send(\"\");\r\n  }  \r\n  \r\n  });\r\n});\r\n\r\n\r\napp.post('/GetEditMyPostData', function(req, res){\r\n  let adId =  req.body.adId;  \r\n  let UserId =  req.body.Userid;      \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {      \r\n    base('PostBooksAd').find(adId, function(err, record) {\r\n      res.send([record.fields.BookName,record.fields.BookType,record.fields.TextLanguage,record.fields.Author,record.fields.BookLink,record.fields.Description,record.fields.BookInterestedIn]);\r\n    })\r\n  }\r\n  else{\r\n    res.send(\"\");\r\n  }\r\n  })\r\n})\r\n\r\n\r\napp.post('/EditMyPostBooksAdData', function(req, res){  \r\n  let UserId =  req.body.Userid;      \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {                  \r\n      base('PostBooksAd').update([\r\n        {\r\n          \"id\": req.body.adId,\r\n          \"fields\": {\r\n            \"BookName\": req.body.BookName, \"BookType\": req.body.BookType, \"TextLanguage\": req.body.TextLanguage, \"Author\": req.body.Author, \"BookLink\": req.body.BookLink, \"Description\": req.body.Description, \"BookInterestedIn\": req.body.BookInterestedIn\r\n          }\r\n        }\r\n      ], function (err, records) {\r\n        if(err){\r\n          res.send([\"Data edit failed\",\"IndianRed\"]);   \r\n        }\r\n        else{\r\n          res.send([\"Data edit successfully.\",\"#93c90e\"]);   \r\n        }\r\n      });  \r\n    }\r\n    else{\r\n      res.send([\"Session expired. Kindly re-login to continue.\",\"IndianRed\"]);\r\n    }\r\n  });\r\n});\r\n\r\n\r\napp.post('/DeleteMyPostData', function(req, res){\r\n  let AdId =  req.body.AdId; \r\n  let UserId =  req.body.Userid;      \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {\r\n    base('PostBooksAd').destroy([AdId], function(err, deletedRecords) {\r\n      if (err) {\r\n        res.send([\"Delete ad failed\",\"IndianRed\"]);        \r\n      }\r\n      else{\r\n      res.send([\"Data edited successfully.\",\"#93c90e\"]);    \r\n      }\r\n    });\r\n  }\r\n  else{\r\n    res.send([\"Session expired. Kindly re-login to continue.\",\"IndianRed\"]);\r\n  }\r\n    });\r\n})\r\n\r\n\r\n\r\n\r\n\r\n//********************************* Requests page coed  ***********************************************/\r\napp.post('/RequestPostsData', function(req, res){\r\n  let city = req.body.City;\r\n  let UserId =  req.body.Userid;\r\n  let token =  req.body.Token;      \r\n  \r\n  let UserLoginsData;\r\n  let ContactStatusData;\r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token){   \r\n\r\n    getCityData().then(function (result) {\r\n      UserLoginsData = result;\r\n      \r\n      return base('ContactStatus').select({\r\n        filterByFormula: 'AND({ContactTo} == \"'+UserId+'\", {Status} = \"Waiting\")',\r\n      }).all();\r\n\r\n    }).then(function (result) { \r\n      ContactStatusData = result;\r\n      \r\n      return base('PostBooksAd').select({  \r\n        filterByFormula: '{UserId} != \"'+UserId+'\"',\r\n      }).all();\r\n\r\n    }).then(function (result){    \r\n      \r\n      var dataArray = [];\r\n      for(var k=0; k<ContactStatusData.length; k++){        \r\n        for(var i=0; i<result.length; i++){\r\n\r\n          if(ContactStatusData[k].fields.ContactFrom == result[i].fields.UserId){                    \r\n            for(var j=0; j<UserLoginsData.length; j++){\r\n              if(UserLoginsData[j].id==result[i].fields.UserId){            \r\n                            \r\n                  dataArray.push([\"\",result[i].fields.BookName,result[i].fields.BookType,result[i].fields.TextLanguage,result[i].fields.Author,result[i].fields.BookLink,result[i].fields.Description,result[i].fields.BookInterestedIn,UserLoginsData[j].fields.Address,UserLoginsData[j].fields.FirstName+ \" \" + UserLoginsData[j].fields.LastName, ContactStatusData[k].id, UserLoginsData[j].id]);                              \r\n\r\n              }\r\n            }\r\n          }       \r\n        }\r\n      }\r\n      res.send(dataArray);\r\n    })\r\n\r\n    \r\n    function getCityData(){     \r\n      return base('UserLogins').select({\r\n        filterByFormula: '{City} = \"'+city+'\"',\r\n      }).all();        \r\n    }   \r\n  }\r\n  else{\r\n    res.send(\"\");\r\n  }\r\n})\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//********************************* Account page code *************************************************/\r\napp.post('/GetAccountDetails', function(req, res){\r\n  let UserId =  req.body.Userid;    \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {      \r\n    base('UserLogins').find(UserId, function(err, record) {\r\n      res.send([record.fields.FirstName,record.fields.LastName,record.fields.Mobile,record.fields.City,record.fields.Address,record.fields.EmailId]);\r\n    })\r\n  }\r\n  else{\r\n    res.send(\"\")\r\n  }\r\n})\r\n  })\r\n\r\n\r\napp.post('/EditAccountDetails', function(req, res){\r\n  let UserId =  req.body.UserId;  \r\n  let firstname = req.body.firstname;\r\n  let lastname = req.body.lastname;\r\n  let mobile = req.body.mobile;\r\n  let city = req.body.city;\r\n  let address = req.body.address;  \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {\r\n  base('UserLogins').update([\r\n    {\r\n      \"id\": UserId,\r\n      \"fields\": {\r\n        \"FirstName\": firstname,\r\n        \"LastName\": lastname,\r\n        \"Mobile\": mobile,  \r\n        \"City\": city,\r\n        \"Address\": address              \r\n      }\r\n    }            \r\n  ], function(err, records) {    \r\n    if(err){\r\n      res.send([\"Account edit failed\",\"IndianRed\"]);\r\n    }        \r\n    else{\r\n      res.send([\"Account edited successfully.\",\"#93c90e\"]);\r\n    }\r\n  });\r\n}\r\nelse{\r\n  res.send([\"Session expired. Kindly re-login to continue.\",\"IndianRed\"]);  \r\n}\r\n  })\r\n  })\r\n\r\n\r\napp.post('/ChangePassword', function(req, res){\r\n  let UserId =  req.body.UserId;\r\n  let OldPassword = req.body.OldPassword;\r\n  let NewPassword = req.body.NewPassword;           \r\n  let token = req.body.Token;  \r\n  base('UserLogins').find(UserId, function(err, record){\r\n  \r\n  if(record.fields.Token == token) {\r\n    base('UserLogins').find(UserId, function(err, record) {\r\n      var hashOldPassword = crypto.pbkdf2Sync(OldPassword, record.fields.Salt, 1000, 64, 'sha512').toString('hex');     \r\n      if(hashOldPassword==record.fields.Password){\r\n        var salt = crypto.randomBytes(16).toString('hex');            \r\n        var hashNewPassword = crypto.pbkdf2Sync(NewPassword, salt, 1000, 64, 'sha512').toString('hex');     \r\n        base('UserLogins').update([\r\n          {\r\n            \"id\": UserId,\r\n            \"fields\": {\r\n              \"Password\": hashNewPassword,\r\n              \"Salt\": salt,                            \r\n            }\r\n          }            \r\n        ], function(err, records) {    \r\n          if(err){\r\n            res.send([\"Password change failed.\",\"IndianRed\"]);\r\n          }        \r\n          else{\r\n            res.send([\"Password changed successfully.\",\"#93c90e\"]);\r\n          }\r\n        });\r\n      }\r\n      else{\r\n        res.send([\"Incorrect Password\"])\r\n      }\r\n    })       \r\n  }\r\n  else{\r\n    res.send(\"\")\r\n  }  \r\n})  \r\n});\r\n\r\n\r\n\r\napp.listen(port, () => {\r\n  console.log(`Example app listening at http://localhost:${port}`)\r\n})\r\n\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1614005706530
  }
}